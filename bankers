#include <stdio.h>
#define MAX_PROCESS 10
#define MAX_RESOURCE 10

int main() {
  int i, j, k, n, m;

  printf("Enter the number of processes: ");
  scanf("%d", &n);

  printf("Enter the number of resources: ");
  scanf("%d", &m);

  int allocation[MAX_PROCESS][MAX_RESOURCE];
  int maximum[MAX_PROCESS][MAX_RESOURCE];
  int need[MAX_PROCESS][MAX_RESOURCE];
  int available[MAX_RESOURCE];
  int work[MAX_RESOURCE];
  int finish[MAX_PROCESS];

  
  printf("Enter allocation matrix:\n");
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      scanf("%d", &allocation[i][j]);
    }
  }

  
  printf("Enter maximum matrix:\n");
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      scanf("%d", &maximum[i][j]);
    }
  }

  
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      need[i][j] = maximum[i][j] - allocation[i][j];
    }
  }

  
  printf("Enter available vector:\n");
  for (i = 0; i < m; i++) {
    scanf("%d", &available[i]);
  }

  
  for (i = 0; i < m; i++) {
    work[i] = available[i];
  }
  for (i = 0; i < n; i++) {
    finish[i] = 0;
  }

  
  int count = 0;
  int safe_sequence[n];
  while (count < n) {
    int found = 0;
    for (i = 0; i < n; i++) {
      if (!finish[i]) {
        int can_be_allocated = 1;
        for (j = 0; j < m; j++) {
          if (need[i][j] > work[j]) {
            can_be_allocated = 0;
            break;
          }
        }
        if (can_be_allocated) {
          for (k = 0; k < m; k++) {
            work[k] += allocation[i][k];
          }
          finish[i] = 1;
          safe_sequence[count] = i;
          count++;
          found = 1;
        }
      }
    }
    if (!found) {
      printf("System is not in safe state.\n");
      return 0;
    }
  }

  printf("System is in safe state.\nSafe sequence: ");
  for (i = 0; i < n; i++) {
    printf("%d ", safe_sequence[i]);
  }
  printf("\n");

  return 0;
}


