#include <stdio.h>
struct Process {
    int pid;         
    int burstTime;   
    int arrivalTime; 
};
void sjfScheduling(struct Process proc[], int n) {
    int i, j;
    struct Process temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (proc[j].arrivalTime > proc[j + 1].arrivalTime) {
                temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }

    
    int waitingTime[n], turnaroundTime[n];
    waitingTime[0] = 0; 
    for (i = 1; i < n; i++) {
        waitingTime[i] = proc[i - 1].burstTime + waitingTime[i - 1];
    }

    for (i = 0; i < n; i++) {
        turnaroundTime[i] = proc[i].burstTime + waitingTime[i];
    }
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (i = 0; i < n; i++) {
        avgWaitingTime += waitingTime[i];
        avgTurnaroundTime += turnaroundTime[i];
    }
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;
    printf("Process ID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burstTime,
               proc[i].arrivalTime, waitingTime[i], turnaroundTime[i]);
    }
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int n, i;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];
    for (i = 0; i < n; i++) {
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &proc[i].burstTime);
        printf("Enter the arrival time for process %d: ", i + 1);
        scanf("%d", &proc[i].arrivalTime);
        proc[i].pid = i + 1;
    }
    sjfScheduling(proc, n);

    return 0;
}

