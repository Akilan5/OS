#include<stdio.h>
void findWaitingTime(int processes[], int n, int burstTime[], int waitingTime[])
{
    waitingTime[0] = 0;
    for (int i = 1; i < n; i++)
    {
        waitingTime[i] = burstTime[i - 1] + waitingTime[i - 1];
    }
}
void findTurnaroundTime(int processes[], int n, int burstTime[], int waitingTime[], int turnaroundTime[])
{
    for (int i = 0; i < n; i++)
    {
        turnaroundTime[i] = burstTime[i] + waitingTime[i];
    }
}
void findAverageTime(int processes[], int n, int burstTime[])
{
    int waitingTime[n], turnaroundTime[n];
    findWaitingTime(processes, n, burstTime, waitingTime);
    findTurnaroundTime(processes, n, burstTime, waitingTime, turnaroundTime);
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++)
    {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
    }
    float averageWaitingTime = (float)totalWaitingTime / n;
    float averageTurnaroundTime = (float)totalTurnaroundTime / n;

    printf("\nAverage Waiting Time: %.2f", averageWaitingTime);
    printf("\nAverage Turnaround Time: %.2f", averageTurnaroundTime);
}

int main()
{
    int n; 
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int processes[n]; 
    int burstTime[n]; 
    for (int i = 0; i < n; i++)
    {
        printf("Enter the process ID for process %d: ", i + 1);
        scanf("%d", &processes[i]);
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }
    findAverageTime(processes, n, burstTime);

    return 0;
}

